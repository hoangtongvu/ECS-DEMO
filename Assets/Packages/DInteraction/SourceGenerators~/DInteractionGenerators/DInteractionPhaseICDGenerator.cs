using Microsoft.CodeAnalysis;
using static DInteractionGenerators.Utilities;

namespace DInteractionGenerators
{
    [Generator]
    public class DInteractionPhaseICDGenerator : IIncrementalGenerator
    {
        public void Initialize(IncrementalGeneratorInitializationContext context)
        {
            var provider = context.SyntaxProvider
                .CreateSyntaxProvider(
                    predicate: static (syntaxNode, _) => IsTargetNode(syntaxNode),
                    transform: static (context, _) => GetInteractionPhaseInfo(context));

            context.RegisterSourceOutput(provider, Generate);
        }

        private static void Generate(SourceProductionContext context, InteractionPhaseInfo info)
        {
            GenerateComponents(context, info);
            GenerateComponentsBakingHelper(context, info);
        }

        private static void GenerateComponents(SourceProductionContext context, InteractionPhaseInfo phaseInfo)
        {
            var sourceCode = $@"// <auto-generated />
using Unity.Entities;

namespace {phaseInfo.Namespace}
{{
    public partial struct {phaseInfo.Name}
    {{
        public struct StartedEvent : IComponentData, IEnableableComponent
	    {{
	    }}

	    public struct CanUpdate : IComponentData, IEnableableComponent
        {{
	    }}

	    public struct Updating : IComponentData, IEnableableComponent
	    {{
	    }}

	    public struct EndedEvent : IComponentData, IEnableableComponent
	    {{
	    }}

	    public struct CanCancel : IComponentData, IEnableableComponent
	    {{
	    }}

	    public struct CanceledEvent : IComponentData, IEnableableComponent
	    {{
	    }}
    }}
}}
";

            context.AddSource($"{phaseInfo.Namespace}.{phaseInfo.Name}.g.cs", sourceCode);
        }

        private static void GenerateComponentsBakingHelper(SourceProductionContext context, InteractionPhaseInfo phaseInfo)
        {
            var sourceCode = $@"// <auto-generated />
using Unity.Entities;

namespace {phaseInfo.Namespace}
{{
    public partial struct {phaseInfo.Name}
    {{
        public static class BakingHelper
        {{
            public static void BakeTags(IBaker baker, in Entity entity)
            {{
                AddAndDisableComponent<{phaseInfo.Name}.StartedEvent>(baker, in entity);
                AddAndDisableComponent<{phaseInfo.Name}.CanUpdate>(baker, in entity);
                AddAndDisableComponent<{phaseInfo.Name}.Updating>(baker, in entity);
                AddAndDisableComponent<{phaseInfo.Name}.EndedEvent>(baker, in entity);
                AddAndDisableComponent<{phaseInfo.Name}.CanCancel>(baker, in entity);
                AddAndDisableComponent<{phaseInfo.Name}.CanceledEvent>(baker, in entity);
            }}

            private static void AddAndDisableComponent<T>(IBaker baker, in Entity entity)
                where T : unmanaged, IEnableableComponent
            {{
                baker.AddComponent<T>(entity);
                baker.SetComponentEnabled<T>(entity, false);
            }}
        }}
    }}
}}
";

            context.AddSource($"{phaseInfo.Namespace}.{phaseInfo.Name}.BakingHelper.g.cs", sourceCode);
        }

    }

}
