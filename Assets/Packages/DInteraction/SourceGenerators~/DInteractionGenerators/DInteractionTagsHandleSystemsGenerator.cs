using Microsoft.CodeAnalysis;
using static DInteractionGenerators.Utilities;

namespace DInteractionGenerators
{
    [Generator]
    public class DInteractionTagsHandleSystemsGenerator : IIncrementalGenerator
    {
        private const string tagHandleSystemGroupIdentifier = $"{PACKAGE_NAME}.Common.PhaseTagsHandleSystemGroup";

        public void Initialize(IncrementalGeneratorInitializationContext context)
        {
            var provider = context.SyntaxProvider
                .CreateSyntaxProvider(
                    predicate: static (syntaxNode, _) => IsTargetNode(syntaxNode),
                    transform: static (context, _) => GetInteractionPhaseInfo(context));

            context.RegisterSourceOutput(provider, Generate);
        }

        private static void Generate(SourceProductionContext context, InteractionPhaseInfo phaseInfo)
        {
            GenerateTagsHandleSystem(context, phaseInfo);
        }

        private static void GenerateTagsHandleSystem(SourceProductionContext context, InteractionPhaseInfo phaseInfo)
        {
            string startedEventIdentifier = $"{phaseInfo.Name}.StartedEvent";
            string canUpdateTagIdentifier = $"{phaseInfo.Name}.CanUpdate";
            string updatingTagIdentifier = $"{phaseInfo.Name}.Updating";
            string endedEventIdentifier = $"{phaseInfo.Name}.EndedEvent";
            string canCancelTagIdentifier = $"{phaseInfo.Name}.CanCancel";
            string canceledEventIdentifier = $"{phaseInfo.Name}.CanceledEvent";

            var sourceCode = $@"// <auto-generated />
using Unity.Entities;
using Unity.Burst;
using Unity.Burst.Intrinsics;
using Unity.Collections;
using {phaseInfo.Namespace};

namespace {PACKAGE_NAME}
{{
    [UpdateInGroup(typeof({tagHandleSystemGroupIdentifier}))]
    [BurstCompile]
    public partial struct {phaseInfo.Name}_TagsHandleSystem : ISystem
    {{
        private EntityQuery query;
        private ComponentTypeHandle<{startedEventIdentifier}> startedEventTypeHandle;
        private ComponentTypeHandle<{canUpdateTagIdentifier}> canUpdateTagTypeHandle;
        private ComponentTypeHandle<{updatingTagIdentifier}> updatingTagTypeHandle;
        private ComponentTypeHandle<{endedEventIdentifier}> endedEventTypeHandle;
        private ComponentTypeHandle<{canCancelTagIdentifier}> canCancelTagTypeHandle;
        private ComponentTypeHandle<{canceledEventIdentifier}> canceledEventTypeHandle;

        [BurstCompile]
        public void OnCreate(ref Unity.Entities.SystemState state)
        {{
            var queryBuilder = new EntityQueryBuilder(Allocator.Temp);
            this.query = queryBuilder
                .WithAll<{startedEventIdentifier}>()
                .WithAll<{canUpdateTagIdentifier}>()
                .WithAll<{updatingTagIdentifier}>()
                .WithAll<{endedEventIdentifier}>()
                .WithAll<{canCancelTagIdentifier}>()
                .WithAll<{canceledEventIdentifier}>()
                .WithOptions(EntityQueryOptions.IgnoreComponentEnabledState) 
                .Build(ref state);

            this.startedEventTypeHandle = state.GetComponentTypeHandle<{startedEventIdentifier}>(false);
            this.canUpdateTagTypeHandle = state.GetComponentTypeHandle<{canUpdateTagIdentifier}>(false);
            this.updatingTagTypeHandle = state.GetComponentTypeHandle<{updatingTagIdentifier}>(false);
            this.endedEventTypeHandle = state.GetComponentTypeHandle<{endedEventIdentifier}>(false);
            this.canCancelTagTypeHandle = state.GetComponentTypeHandle<{canCancelTagIdentifier}>(false);
            this.canceledEventTypeHandle = state.GetComponentTypeHandle<{canceledEventIdentifier}>(false);

            state.RequireForUpdate(this.query);
        }}

        [BurstCompile]
        public void OnUpdate(ref SystemState state)
        {{
            this.startedEventTypeHandle.Update(ref state);
            this.canUpdateTagTypeHandle.Update(ref state);
            this.updatingTagTypeHandle.Update(ref state);
            this.endedEventTypeHandle.Update(ref state);
            this.canCancelTagTypeHandle.Update(ref state);
            this.canceledEventTypeHandle.Update(ref state);

            state.Dependency = new TagsHandleJob
            {{
                StartedEventTypeHandle = this.startedEventTypeHandle,
                CanUpdateTagTypeHandle = this.canUpdateTagTypeHandle,
                UpdatingTagTypeHandle = this.updatingTagTypeHandle,
                EndedEventTypeHandle = this.endedEventTypeHandle,
                CanCancelTagTypeHandle = this.canCancelTagTypeHandle,
                CanceledEventTypeHandle = this.canceledEventTypeHandle,
            }}.ScheduleParallel(this.query, state.Dependency);
        }}

        [BurstCompile]
        public struct TagsHandleJob : IJobChunk
        {{
            public ComponentTypeHandle<{startedEventIdentifier}> StartedEventTypeHandle;
            public ComponentTypeHandle<{canUpdateTagIdentifier}> CanUpdateTagTypeHandle;
            public ComponentTypeHandle<{updatingTagIdentifier}> UpdatingTagTypeHandle;
            public ComponentTypeHandle<{endedEventIdentifier}> EndedEventTypeHandle;
            public ComponentTypeHandle<{canCancelTagIdentifier}> CanCancelTagTypeHandle;
            public ComponentTypeHandle<{canceledEventIdentifier}> CanceledEventTypeHandle;

            [BurstCompile]
            public void Execute(in ArchetypeChunk chunk, int unfilteredChunkIndex, bool useEnabledMask, in v128 chunkEnabledMask)
            {{
                var startedEventEnabledMask_RW = chunk.GetEnabledMask(ref this.StartedEventTypeHandle);
                var canUpdateTagEnabledMask_RO = chunk.GetEnabledMask(ref this.CanUpdateTagTypeHandle);
                var updatingTagEnabledMask_RW = chunk.GetEnabledMask(ref this.UpdatingTagTypeHandle);
                var endedEventEnabledMask_RW = chunk.GetEnabledMask(ref this.EndedEventTypeHandle);
                var canCancelTagEnabledMask_RO = chunk.GetEnabledMask(ref this.CanCancelTagTypeHandle);
                var canceledEventEnabledMask_RW = chunk.GetEnabledMask(ref this.CanceledEventTypeHandle);

                var enumerator = new ChunkEntityEnumerator(useEnabledMask, chunkEnabledMask, chunk.Count);

                while (enumerator.NextEntityIndex(out var i))
                {{
                    var startedEvent = startedEventEnabledMask_RW.GetEnabledRefRW<{startedEventIdentifier}>(i);
                    var canUpdateTag = canUpdateTagEnabledMask_RO.GetEnabledRefRO<{canUpdateTagIdentifier}>(i);
                    var updatingTag = updatingTagEnabledMask_RW.GetEnabledRefRW<{updatingTagIdentifier}>(i);
                    var endedEvent = endedEventEnabledMask_RW.GetEnabledRefRW<{endedEventIdentifier}>(i);
                    var canCancelTag = canCancelTagEnabledMask_RO.GetEnabledRefRO<{endedEventIdentifier}>(i);
                    var canceledEvent = canceledEventEnabledMask_RW.GetEnabledRefRW<{endedEventIdentifier}>(i);

                    startedEvent.ValueRW = false;
                    endedEvent.ValueRW = false;
                    canceledEvent.ValueRW = false;

                    if (canCancelTag.ValueRO && updatingTag.ValueRO)
                    {{
                        //OnReactionCanceled();
                        canceledEvent.ValueRW = true;
                        updatingTag.ValueRW = false;
                        return;
                    }}

                    if (canUpdateTag.ValueRO)
                    {{
                        if (!startedEvent.ValueRO && !updatingTag.ValueRO)
                        {{
                            //OnReactionStart();
                            startedEvent.ValueRW = true;
                            updatingTag.ValueRW = true;
                        }}

                        //OnReactionUpdate();
                    }}
                    else
                    {{
                        if (updatingTag.ValueRO && !endedEvent.ValueRO)
                        {{
                            //OnReactionEnd();
                            endedEvent.ValueRW = true;
                            updatingTag.ValueRW = false;
                        }}
                    }}

                }}

            }}

        }}

    }}

}}
";

            context.AddSource($"{phaseInfo.Namespace}.{phaseInfo.Name}.TagsHandleSystem.g.cs", sourceCode);
        }

    }

}
