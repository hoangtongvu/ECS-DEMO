using Microsoft.CodeAnalysis;
using System.Linq;
using static UITypeGenerators.Utilities;

namespace UITypeGenerators
{
    [Generator]
    public class ConcreteUICtrlPartialGenerator : IIncrementalGenerator
    {
        private const string uiTypeEnumNamespace = "Core.UI.Identification";
        private const string uiTypeEnumIdentifier = $"{uiTypeEnumNamespace}.UIType";

        public void Initialize(IncrementalGeneratorInitializationContext context)
        {
            var provider = context.SyntaxProvider
                .CreateSyntaxProvider(
                    static (syntaxNode, _) => IsTargetNode(syntaxNode),
                    static (context, _) => GetConcreteUIInfo(context))
                .Collect()
                .SelectMany((myObjects, _) => myObjects.Distinct());

            context.RegisterSourceOutput(provider, Generate);
        }

        private static void Generate(SourceProductionContext context, ConcreteUIInfo concreteUIInfo)
        {
            string sourceCode = $@"// <auto-generated />

namespace {concreteUIInfo.ConcreteUICtrlNamespace}
{{
    public partial class {concreteUIInfo.ConcreteUICtrlName}
    {{
        public override {uiTypeEnumIdentifier} GetUIType() => {uiTypeEnumIdentifier}.{concreteUIInfo.UITypeName};
    }}
}}";

            context.AddSource($"{concreteUIInfo.ConcreteUICtrlName}.g.cs", sourceCode);
        }

    }

}
