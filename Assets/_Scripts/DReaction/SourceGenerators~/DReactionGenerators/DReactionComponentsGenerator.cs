using Microsoft.CodeAnalysis;
using static DReactionGenerators.Utilities;

namespace DReactionGenerators
{
    [Generator]
    public class DReactionComponentsGenerator : IIncrementalGenerator
    {
        public void Initialize(IncrementalGeneratorInitializationContext context)
        {
            var provider = context.SyntaxProvider
                .CreateSyntaxProvider(
                    predicate: static (syntaxNode, _) => IsTargetNode(syntaxNode),
                    transform: static (context, _) => GetReactionComponentsContainerInfo(context));

            context.RegisterSourceOutput(provider, Generate);
        }

        private static void Generate(SourceProductionContext context, ReactionComponentsContainerInfo containerInfo)
        {
            GenerateComponents(context, containerInfo);
            GenerateComponentsBakingHelper(context, containerInfo);
        }

        private static void GenerateComponents(SourceProductionContext context, ReactionComponentsContainerInfo containerInfo)
        {
            var sourceCode = $@"// <auto-generated />
using Unity.Entities;

namespace {containerInfo.ContainerNamespace}
{{
    public partial struct {containerInfo.ContainerName}
    {{
        public struct StartedTag : IComponentData, IEnableableComponent
        {{
        }}

        public struct CanUpdateTag : IComponentData, IEnableableComponent
        {{
        }}

        public struct UpdatingTag : IComponentData, IEnableableComponent
        {{
        }}

        public struct EndedTag : IComponentData, IEnableableComponent
        {{
        }}

        public struct TimerSeconds : IComponentData
        {{
            public float Value;
        }}
    }}
}}
";

            context.AddSource($"{containerInfo.ContainerNamespace}.{containerInfo.ContainerName}.g.cs", sourceCode);
        }

        private static void GenerateComponentsBakingHelper(SourceProductionContext context, ReactionComponentsContainerInfo containerInfo)
        {
            var sourceCode = $@"// <auto-generated />
using Unity.Entities;

namespace {containerInfo.ContainerNamespace}
{{
    public partial struct {containerInfo.ContainerName}
    {{
        public static class BakingHelper
        {{
            public static void BakeTags(IBaker baker, in Entity entity)
            {{
                baker.AddComponent<{containerInfo.ContainerName}.StartedTag>(entity);
                baker.SetComponentEnabled<{containerInfo.ContainerName}.StartedTag>(entity, false);
                baker.AddComponent<{containerInfo.ContainerName}.CanUpdateTag>(entity);
                baker.SetComponentEnabled<{containerInfo.ContainerName}.CanUpdateTag>(entity, false);
                baker.AddComponent<{containerInfo.ContainerName}.UpdatingTag>(entity);
                baker.SetComponentEnabled<{containerInfo.ContainerName}.UpdatingTag>(entity, false);
                baker.AddComponent<{containerInfo.ContainerName}.EndedTag>(entity);
                baker.SetComponentEnabled<{containerInfo.ContainerName}.EndedTag>(entity, false);
            }}
        }}
    }}
}}
";

            context.AddSource($"{containerInfo.ContainerNamespace}.{containerInfo.ContainerName}.BakingHelper.g.cs", sourceCode);
        }

    }

}
